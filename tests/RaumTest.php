<?php

require_once dirname(__FILE__) . '/../Raum.php';

/**
 * Test class for Raum.
 * Generated by PHPUnit on 2011-12-14 at 17:13:13.
 */
class RaumTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Raum
     */
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function testRaumHatAttributSchalter() {
        $raum = new Raum(1);
        $this->assertClassHasAttribute('schalterArray', 'Raum');
    }
    
    public function testRaumHatAttributSchalterAlsArray() {
        $raum = new Raum(1);
        $this->assertInternalType('array', $raum->schalterArray);
    }
    
    public function testSchalterArrayHatSovieleElementeWieInitialisiert() {
        $raum = new Raum(1);
        $this->assertCount(1, $raum->schalterArray);
    }
    
    public function testSchalterArrayHatSovieleElementeWieInitialisiertMit100() {
        $raum = new Raum(100);
        $this->assertCount(100, $raum->schalterArray);
    }
    
    public function testSchalterArrayHatSovieleElementeWieInitialisiertMit100UndAlleSindLichtschalter() {
        $raum = new Raum(100);
        $this->assertCount(100, $raum->schalterArray);
        foreach ($raum->schalterArray as $lichtschalterObj){
            $this->assertObjectHasAttribute('zustand', $lichtschalterObj);
        }    
    }
    
    public function testSchalterArrayHatSovieleElementeWieInitialisiertMit33UndAlleSindLichtschalter() {
        $raum = new Raum(33);
        $this->assertCount(33, $raum->schalterArray);
        foreach ($raum->schalterArray as $lichtschalterObj){
            $this->assertObjectHasAttribute('zustand', $lichtschalterObj);
        }
    }
    
    public function testWievieleLichterBrennenBei2(){
        $raum = new Raum(2);
        $this->assertInternalType('int', $raum->countAngeschalteteLichter());
        $this->assertEquals(0, $raum->countAngeschalteteLichter());
    }
    
    public function testWievieleLichterBrennenBei2WennErsterAngeschaltetWird(){
        $raum = new Raum(2);
		$raum->schalterArray[0]->toggleZustand();
		$this->assertTrue($raum->schalterArray[0]->getZustand());
		$this->assertFalse($raum->schalterArray[1]->getZustand());
        $this->assertEquals(1, $raum->countAngeschalteteLichter());
    }
    
    public function zustandNach2SchaltendenMenschen(){
		$raum = new Raum(2);
		$raum->schaltenDurchMenschen();
		$this->assertEquals(1, $raum->countAngeschalteteLichter());
	}    
    
    public function zustandNach3SchaltendenMenschen(){
		$raum = new Raum(3);
		$raum->schaltenDurchMenschen();
		$this->assertEquals(1, $raum->countAngeschalteteLichter());
	}    
    
    public function zustandNach100SchaltendenMenschen(){
		$raum = new Raum(100);
		$raum->schaltenDurchMenschen();
		$this->assertEquals(10, $raum->countAngeschalteteLichter());
	}    
    
    public function zustandNach4SchaltendenMenschen(){
		$raum = new Raum(4);
		$raum->schaltenDurchMenschen();
		$this->assertEquals(2, $raum->countAngeschalteteLichter());
	}    
    
    public function zustandNach50SchaltendenMenschen(){
		$raum = new Raum(50);
		$raum->schaltenDurchMenschen();
		$this->assertEquals(7, $raum->countAngeschalteteLichter());
	}    
    
}

?>
